{"version":3,"sources":["constants/pageNavigation.ts","components/Header.tsx","constants/index.ts","calculations.ts","components/MaxMultiplierForm.tsx","constants/emojis.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["pages","maxMultiplier","title","hash","ppToMultiplier","cashToMultiplier","charts","navigation","profile","Header","children","activePage","ps","as","className","open","src","alt","Object","entries","map","itemIdx","key","href","Panel","item","aria-hidden","initialPrestigeMultCosts","qty","cost","multPerPrest","multiplierIndex","5","15","30","50","100","incrementMultiplier","mult","costs","updatedCosts","prevMultVals","newCost","maxMultFromPrestigePoints","points","multipliers","cheapest","reduce","x","y","undefined","subsequentIteration","multiplier","remainingPrest","MaxMultiplierForm","useState","startingPrestige","setStartingPrestige","maxMult","htmlFor","type","name","id","placeholder","onChange","e","userNum","Number","target","value","isNaN","toFixed","i","multSize","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0a49e6fa.chunk.js","sourcesContent":["export const pages = {\n  maxMultiplier: {\n    title: \"Max Multiplier\",\n    hash: \"maxMult\",\n  },\n  ppToMultiplier: {\n    title: \"PP Needed for Multiplier\",\n    hash: \"ppToMult\",\n  },\n  cashToMultiplier: {\n    title: \"Cash Needed for Multiplier\",\n    hash: \"cashToMult\",\n  },\n  charts: {\n    title: \"Charts\",\n    hash: \"charts\",\n  },\n} as const;\n\nexport type PageKey = keyof typeof pages;\n","import { FC, Fragment } from \"react\";\nimport { Disclosure, Menu, Transition } from \"@headlessui/react\";\nimport { BellIcon, MenuIcon, XIcon } from \"@heroicons/react/outline\";\nimport { pages as ps } from \"../constants/pageNavigation\";\n\nconst navigation = [\"Dashboard\", \"Team\", \"Projects\", \"Calendar\", \"Reports\"];\nconst profile = [\"Your Profile\", \"Settings\", \"Sign out\"];\n\nfunction classNames(...classes: string[]) {\n  return classes.filter(Boolean).join(\" \");\n}\n\ninterface Props<\n  T extends Record<string, { title: string; hash: string }> = typeof ps\n> {\n  activePage: keyof T;\n  pages: T;\n}\n\nexport const Header: FC<Props> = ({ children, activePage, pages = ps }) => {\n  return (\n    <div>\n      <Disclosure as=\"nav\" className=\"bg-gray-800\">\n        {({ open }) => (\n          <>\n            <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n              <div className=\"flex items-center justify-between h-16\">\n                <div className=\"flex items-center\">\n                  <div className=\"flex-shrink-0\">\n                    <img className=\"h-8 w-8\" src=\"./prest.png\" alt=\"Workflow\" />\n                  </div>\n                  <div className=\"hidden md:block\">\n                    <div className=\"ml-10 flex items-baseline space-x-4\">\n                      {Object.entries(pages).map(\n                        ([key, { title, hash }], itemIdx) =>\n                          itemIdx === 0 ? (\n                            <Fragment key={key}>\n                              {/* Current: \"bg-gray-900 text-white\", Default: \"text-gray-300 hover:bg-gray-700 hover:text-white\" */}\n                              <a\n                                href={`#${hash}`}\n                                className=\"bg-gray-900 text-white px-3 py-2 rounded-md text-sm font-medium\"\n                              >\n                                {title}\n                              </a>\n                            </Fragment>\n                          ) : (\n                            <a\n                              key={key}\n                              href={`#${hash}`}\n                              className=\"text-gray-300 hover:bg-gray-700 hover:text-white px-3 py-2 rounded-md text-sm font-medium\"\n                            >\n                              {title}\n                            </a>\n                          )\n                      )}\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <Disclosure.Panel className=\"md:hidden\">\n              <div className=\"px-2 pt-2 pb-3 space-y-1 sm:px-3\">\n                {navigation.map((item, itemIdx) =>\n                  itemIdx === 0 ? (\n                    <Fragment key={item}>\n                      {/* Current: \"bg-gray-900 text-white\", Default: \"text-gray-300 hover:bg-gray-700 hover:text-white\" */}\n                      <a\n                        href=\"#\"\n                        className=\"bg-gray-900 text-white block px-3 py-2 rounded-md text-base font-medium\"\n                      >\n                        {item}\n                      </a>\n                    </Fragment>\n                  ) : (\n                    <a\n                      key={item}\n                      href=\"#\"\n                      className=\"text-gray-300 hover:bg-gray-700 hover:text-white block px-3 py-2 rounded-md text-base font-medium\"\n                    >\n                      {item}\n                    </a>\n                  )\n                )}\n              </div>\n              <div className=\"pt-4 pb-3 border-t border-gray-700\">\n                <div className=\"flex items-center px-5\">\n                  <div className=\"flex-shrink-0\">\n                    <img\n                      className=\"h-10 w-10 rounded-full\"\n                      src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80\"\n                      alt=\"\"\n                    />\n                  </div>\n                  <div className=\"ml-3\">\n                    <div className=\"text-base font-medium leading-none text-white\">\n                      Tom Cook\n                    </div>\n                    <div className=\"text-sm font-medium leading-none text-gray-400\">\n                      tom@example.com\n                    </div>\n                  </div>\n                  <button className=\"ml-auto bg-gray-800 flex-shrink-0 p-1 rounded-full text-gray-400 hover:text-white focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-800 focus:ring-white\">\n                    <span className=\"sr-only\">View notifications</span>\n                    <BellIcon className=\"h-6 w-6\" aria-hidden=\"true\" />\n                  </button>\n                </div>\n                <div className=\"mt-3 px-2 space-y-1\">\n                  {profile.map((item) => (\n                    <a\n                      key={item}\n                      href=\"#\"\n                      className=\"block px-3 py-2 rounded-md text-base font-medium text-gray-400 hover:text-white hover:bg-gray-700\"\n                    >\n                      {item}\n                    </a>\n                  ))}\n                </div>\n              </div>\n            </Disclosure.Panel>\n          </>\n        )}\n      </Disclosure>\n\n      <header className=\"bg-white shadow\">\n        <div className=\"max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8\">\n          <h1 className=\"text-3xl font-bold text-gray-900\">\n            {pages[activePage].title}\n          </h1>\n        </div>\n      </header>\n      <main>\n        <div className=\"max-w-7xl mx-auto py-6 sm:px-6 lg:px-8\">{children}</div>\n      </main>\n    </div>\n  );\n};\n","export const prestigeLevels = [\n  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\n  23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\n  42, 43, 44, 45, 46, 47, 48, 49, 50,\n] as const;\n\nexport const moneyPerPrestige: Record<PrestigeLevel, Dollars> = {\n  1: 12000,\n  2: 56000,\n  3: 144000,\n  4: 288000,\n  5: 500000,\n  6: 792000,\n  7: 1176000,\n  8: 1664000,\n  9: 2268000,\n  10: 3000000,\n  11: 3872000,\n  12: 4896000,\n  13: 6084000,\n  14: 7448000,\n  15: 9000000,\n  16: 10752000,\n  17: 12716000,\n  18: 14904000,\n  19: 17328000,\n  20: 20000000,\n  21: 22932000,\n  22: 26136000,\n  23: 29624000,\n  24: 33408000,\n  25: 37500000,\n  26: 41912000,\n  27: 46656000,\n  28: 51744000,\n  29: 57188000,\n  30: 63000000,\n  31: 69192000,\n  32: 75776000,\n  33: 82764000,\n  34: 90168000,\n  35: 98000000,\n  36: 106272000,\n  37: 114996000,\n  38: 124184000,\n  39: 133848000,\n  40: 144000000,\n  41: 154652000,\n  42: 165816000,\n  43: 177504000,\n  44: 189728000,\n  45: 202500000,\n  46: 215832000,\n  47: 229736000,\n  48: 244224000,\n  49: 259308000,\n  50: 275000000,\n};\n\nexport const initialPrestigeMultCosts: PrestigeMultipliersWithValue = [\n  [5, { qty: 0, cost: 5, multPerPrest: 1 }],\n  [15, { qty: 0, cost: 50, multPerPrest: 15 / 50 }],\n  [30, { qty: 0, cost: 250, multPerPrest: 30 / 250 }],\n  [50, { qty: 0, cost: 750, multPerPrest: 50 / 750 }],\n  [100, { qty: 0, cost: 2500, multPerPrest: 100 / 2500 }],\n];\n\nexport const multiplierIndex: Record<PrestigeMultiplier, 0 | 1 | 2 | 3 | 4> = {\n  5: 0,\n  15: 1,\n  30: 2,\n  50: 3,\n  100: 4,\n};\n\nexport type PrestigeMultiplierCosts<\n  M extends PrestigeMultiplier = PrestigeMultiplier\n> = [\n  multiplier: M,\n  values: { qty: number; cost: PrestigePoints; multPerPrest: Multiplier }\n];\n\nexport type PrestigeMultipliersWithValue = [\n  PrestigeMultiplierCosts<5>,\n  PrestigeMultiplierCosts<15>,\n  PrestigeMultiplierCosts<30>,\n  PrestigeMultiplierCosts<50>,\n  PrestigeMultiplierCosts<100>\n];\n\nexport type PrestigeMultiplier = 5 | 15 | 30 | 50 | 100;\n\nexport type PrestigePoints = number;\n\nexport type Dollars = number;\n\nexport type Multiplier = number;\n\nexport type PrestigeLevel = typeof prestigeLevels[number];\n","import {\n  PrestigeMultiplier,\n  PrestigeMultipliersWithValue,\n  PrestigeMultiplierCosts,\n  multiplierIndex,\n  initialPrestigeMultCosts,\n  PrestigePoints,\n  PrestigeLevel,\n  Dollars,\n  moneyPerPrestige,\n  Multiplier,\n} from \"./constants\";\n\nexport type MaxMultiplierResult = [\n  result: { multiplier: Multiplier; remainingPrest: PrestigePoints },\n  multipliers: PrestigeMultipliersWithValue\n];\n\nexport const cheapestMultiplierOption = (\n  costs: PrestigeMultipliersWithValue\n): PrestigeMultiplierCosts =>\n  costs.reduce((cheapest, multOption) =>\n    cheapest[1].multPerPrest >= multOption[1].multPerPrest\n      ? cheapest\n      : multOption\n  );\n\nexport const incrementMultiplier =\n  (mult: PrestigeMultiplier) =>\n  (costs: PrestigeMultipliersWithValue): PrestigeMultipliersWithValue => {\n    const updatedCosts = [...costs];\n    const prevMultVals = costs[multiplierIndex[mult]];\n    const newCost =\n      prevMultVals[1].cost +\n      initialPrestigeMultCosts[multiplierIndex[mult]][1].cost;\n    updatedCosts[multiplierIndex[mult]] = [\n      prevMultVals[0],\n      {\n        qty: costs[multiplierIndex[mult]][1].qty + 1,\n        cost: newCost,\n        multPerPrest: mult / newCost,\n      },\n    ];\n\n    // TODO: would be nice to avoid the typecast but this should be fine given that mult is valid\n    // one day i'll learn monocle-ts :\\\n    return updatedCosts as PrestigeMultipliersWithValue;\n  };\n\nconst minPrestigeToGetMult =\n  (wantedMultiplier: Multiplier, prevCost = 0) =>\n  (\n    mults = initialPrestigeMultCosts\n  ): [prestige: PrestigePoints, multipliers: PrestigeMultipliersWithValue] => {\n    if (wantedMultiplier <= 0) return [prevCost, mults];\n    const cheapestMult = cheapestMultiplierOption(mults);\n    return minPrestigeToGetMult(\n      wantedMultiplier - cheapestMult[0],\n      prevCost + cheapestMult[1].cost\n    )(incrementMultiplier(cheapestMult[0])(mults));\n  };\n\nexport const maxMultFromPrestigePoints = (\n  points: PrestigePoints,\n  multipliers = initialPrestigeMultCosts\n): MaxMultiplierResult => {\n  const cheapest = multipliers.reduce<PrestigeMultiplierCosts | undefined>(\n    (x, y) =>\n      (x !== undefined && x[1].multPerPrest >= y[1].multPerPrest) ||\n      y[1].cost > points\n        ? x\n        : y,\n    undefined\n  );\n\n  if (cheapest) {\n    const subsequentIteration = maxMultFromPrestigePoints(\n      points - cheapest[1].cost,\n      incrementMultiplier(cheapest[0])(multipliers)\n    );\n    return [\n      {\n        multiplier: cheapest[0] + subsequentIteration[0].multiplier,\n        remainingPrest: subsequentIteration[0].remainingPrest,\n      },\n      subsequentIteration[1],\n    ];\n  }\n  return [{ multiplier: 0, remainingPrest: points }, multipliers];\n};\n\nexport const dollarsNeededForMult =\n  (level: PrestigeLevel) =>\n  (\n    wantedMultiplier: number\n  ): [cost: Dollars, multipliers: PrestigeMultipliersWithValue] => {\n    const minPrestige = minPrestigeToGetMult(wantedMultiplier)(\n      initialPrestigeMultCosts\n    );\n    return [moneyPerPrestige[level] * minPrestige[0], minPrestige[1]];\n  };\n\n// TODO: come back to address the perf issues here\n// export const maxMultFromPrestigePoints = (\n//   points: PrestigePoints,\n//   multipliers = initialPrestigeMultCosts\n// ): [\n//   result: { multiplier: Multiplier; remainingPrest: PrestigePoints },\n//   multipliers: PrestigeMultipliersWithValue\n// ] =>\n//   pipe(\n//     multipliers,\n//     A.filter(([_, { cost }]) => points >= cost),\n//     NEA.fromArray,\n//     O.chain((neMultipliers) => {\n//       const initialMult = NEA.head(neMultipliers);\n//       return pipe(\n//         neMultipliers,\n//         NEA.tail,\n//         NEA.fromArray,\n//         O.match(\n//           () => O.some(initialMult),\n//           (otherMults) =>\n//             O.some(\n//               NEA.reduce(initialMult, Ord.max(ordMultiplierCost))(otherMults)\n//             )\n//         )\n//       );\n//     }),\n//     O.match(\n//       () => [{ multiplier: 0, remainingPrest: points }, multipliers],\n//       (cheapestMult) => {\n//         const subsequentIteration = maxMultFromPrestigePoints(\n//           points - cheapestMult[1].cost,\n//           incrementMultiplier(cheapestMult[0])(multipliers)\n//         );\n//         return [\n//           {\n//             multiplier: cheapestMult[0] + subsequentIteration[0].multiplier,\n//             remainingPrest: subsequentIteration[0].remainingPrest,\n//           },\n//           subsequentIteration[1],\n//         ];\n//       }\n//     )\n//   );\n","import * as React from \"react\";\nimport { FC, useState } from \"react\";\nimport { maxMultFromPrestigePoints } from \"../calculations\";\nimport { initialPrestigeMultCosts } from \"../constants\";\nimport { MULTIPLIER, PRESTIGE } from \"../constants/emojis\";\nimport { PrestigeMultiplierCard } from \"./PrestigeMultiplierCard\";\n\ninterface Props {}\n\nexport const MaxMultiplierForm: FC<Props> = ({}) => {\n  const [startingPrestige, setStartingPrestige] = useState<number>(0);\n\n  const [{ multiplier: maxMult, remainingPrest }, multipliers] =\n    maxMultFromPrestigePoints(startingPrestige);\n  return (\n    <form>\n      <div className=\"bg-white shadow overflow-hidden sm:rounded-lg\">\n        <div className=\"px-4 py-5 sm:px-6\">\n          <p className=\"border-b border-gray-200\">\n            <h3>\n              <label\n                htmlFor=\"startingPrestige\"\n                className=\"block text-sm font-medium text-gray-700\"\n              >\n                Starting Prestige\n              </label>\n              <div className=\"mt-1 relative rounded-md shadow-sm\">\n                <div className=\"absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none\">\n                  <span className=\"text-gray-500 sm:text-sm\">{PRESTIGE}</span>\n                </div>\n                <input\n                  type=\"text\"\n                  name=\"startingPrestige\"\n                  id=\"startingPrestige\"\n                  className=\"focus:ring-indigo-500 focus:border-indigo-500 block w-full pl-7 pr-12 sm:text-md border-gray-300 rounded-md\"\n                  placeholder=\"0\"\n                  onChange={(e) => {\n                    const userNum = Number(e.target.value);\n                    !isNaN(userNum) &&\n                      userNum > -1 &&\n                      setStartingPrestige(Number(e.target.value));\n                  }}\n                />\n              </div>\n            </h3>\n          </p>\n          <p className=\"mt-1 max-w-2xl text-sm text-gray-500\">\n            Remaining Prestige: {remainingPrest}\n            {PRESTIGE}\n            <br />\n            TotalPrestige Multiplier: {(maxMult / 100).toFixed(2)}x {MULTIPLIER}\n          </p>\n        </div>\n        <div className=\"border-t border-gray-200\">\n          <dl>\n            {multipliers.map(([multSize, { qty, cost }], i) => (\n              <div\n                className={\n                  (i % 2 ? \"bg-gray-50\" : \"bg-white\") +\n                  \" px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6\"\n                }\n              >\n                <dt className=\"text-sm font-medium text-gray-500\">\n                  {multSize}% Multiplier\n                </dt>\n                <dd className=\"mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2\">\n                  {qty}\n                </dd>\n              </div>\n            ))}\n          </dl>\n        </div>\n      </div>\n    </form>\n  );\n};\n","export const PRESTIGE = \"💠\";\nexport const MULTIPLIER = \"💹\";\nexport const COIN = \"🪙\";\nexport const BALANCE = \"💰\";\n","import React from \"react\";\nimport { Header } from \"./components/Header\";\nimport { pages } from \"./constants/pageNavigation\";\nimport { MaxMultiplierForm } from \"./components/MaxMultiplierForm\";\n\nfunction App() {\n  return (\n    <Header activePage=\"maxMultiplier\" pages={pages}>\n      <div className=\"flex flex-col h-full items-center justify-center \">\n        <MaxMultiplierForm />\n      </div>\n    </Header>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}